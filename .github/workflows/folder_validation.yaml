
name: Pull_request_details

on: 
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  get_pull_request_details:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Master Branch
        id: master_branch
        run: |
          MASTER_BRANCH=$(curl -s -H "Authorization: token ${{ secrets.AUTOMATION_REPO_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/branches/master | jq -r '.name')
          echo "::set-output name=master_branch::$MASTER_BRANCH"
          echo "$MASTER_BRANCH"

      - name: Extract pull request number
        id: extract_pr_number
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "The pull request number is $PR_NUMBER"

      - name: Get Pull Request Details
        id: pr_details
        run: |
          pull_requests=$(curl -s -H 'Authorization: token ${{ secrets.AUTOMATION_REPO_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files | jq -r '.[].filename')
          echo "$pull_requests"
          for filepath in "${pull_requests[@]}"; do
            directory_path=$(dirname "$filepath")
            echo "$directory_path"
          done
          echo "::set-output name=pull_requests_directory_path::$directory_path"
    
      - name: Check if PR folder/files exists
        run: |
          master_branch="${{ steps.master_branch.outputs.master_branch }}"
          directory_path="${{ steps.pr_details.outputs.pull_requests_directory_path }}"
          echo "$directory_path"
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.AUTOMATION_REPO_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/contents/$directory_path?ref=$master_branch")
            response_code=$(echo "$response" | tail -n 1)
            echo "$response"
            if [ "$response_code" -eq 200 ]; then
               echo "$directory_path exists in the master branch."
            elif [ "$response_code" -eq 404 ]; then
               echo "$directory_path does not exist in the master branch."
           else
               echo "Error: Unexpected response code $response_code"
            fi  
